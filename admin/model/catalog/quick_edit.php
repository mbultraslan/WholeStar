<?php
class ModelCatalogQuickEdit extends Model {

	public function getSettings($save = false) {
		$Settings = DIR_CONFIG . 'quick_edit.php';
		if (!file_exists($Settings)) {
			$f = fopen($Settings, 'w');
			fclose($f);
		} else {
			include_once($Settings);
		}
		$Set = array(
			'heading_inline_edit' => array( // Section Name
				'entry_name' => array( // Setting Name
					'var' => 'QE_INLINE_NAME' // Name of the constant/variable
				),
				'entry_model' => array(
					'var' => 'QE_INLINE_MODEL'
				),
				'entry_price' => array(
					'var' => 'QE_INLINE_PRICE'
				),
				'entry_type_id' => array(
					'var' => 'QE_INLINE_TYPE'
				),
				'entry_category' => array(
					'var' => 'QE_INLINE_CATEGORY'
				),
				'entry_quantity' => array(
					'var' => 'QE_INLINE_QUANTITY'
				),
				'entry_status' => array(
					'var' => 'QE_INLINE_STATUS'
				),
				'entry_autoclose' => array(
					'var' => 'QE_INLINE_AUTOCLOSE',
					'help' => 'help_autoclose'
				),
				'entry_autosave' => array(
					'var' => 'QE_INLINE_AUTOSAVE',
					'help' => 'help_autosave'
				),
				'entry_default_sort' => array(
					'var' => 'QE_DEFAULT_SORT',
					'help' => 'help_default_sort'
				),
				'entry_descending' => array(
					'var' => 'QE_DEFAULT_ORDER',
					'help' => 'help_descending'
				)
			),
			'heading_quick_edit' => array( // Section Name
				'entry_model' => array( // Setting Name
					'var' => 'QE_QUICK_MODEL' // Name of the constant/variable
				),
				'entry_manufacturer' => array(
					'var' => 'QE_QUICK_MANUFACTURER'
				),
				'entry_type_id' => array(
					'var' => 'QE_QUICK_TYPE'
				),
				'entry_sku' => array(
					'var' => 'QE_QUICK_SKU'
				),
				'entry_upc' => array(
					'var' => 'QE_QUICK_UPC'
				),
				'entry_price' => array(
					'var' => 'QE_QUICK_PRICE'
				),
				'entry_tax_class' => array(
					'var' => 'QE_QUICK_TAX'
				),
				'entry_quantity' => array(
					'var' => 'QE_QUICK_QTY'
				),
				'entry_keyword' => array(
					'var' => 'QE_QUICK_SEO'
				),
				'entry_date_available' => array(
					'var' => 'QE_QUICK_DATE'
				),
				'entry_size' => array(
					'var' => 'QE_QUICK_SIZE'
				),
				'entry_length' => array(
					'var' => 'QE_QUICK_LENGTH'
				),
				'entry_weight' => array(
					'var' => 'QE_QUICK_WEIGHT'
				),
				'entry_weight_class' => array(
					'var' => 'QE_QUICK_WEIGHTCLASS'
				),
				'entry_points' => array(
					'var' => 'QE_QUICK_POINTS',
					'help' => 'help_points'
				),
				'entry_reward' => array(
					'var' => 'QE_QUICK_REWARD',
					'help' => 'help_reward'
				),
				'entry_status' => array(
					'var' => 'QE_QUICK_STATUS'
				),
				'entry_sort_order' => array(
					'var' => 'QE_QUICK_SORT'
				),
				'entry_category_height' => array(
					'var' => 'QE_CATEGORY_HEIGHT',
					'help' => 'help_category_height'
				),
				'entry_dialog_width' => array(
					'var' => 'QE_DIALOG_WIDTH',
					'help' => 'help_dialog_width'
				),
				'entry_dialog_height' => array(
					'var' => 'QE_DIALOG_HEIGHT',
					'help' => 'help_dialog_height'
				),
				'entry_timeout' => array(
					'var' => 'QE_QUICK_TIME',
					'help' => 'help_timeout'
				)
			)
		);

		if (!file_exists(DIR_CONFIG . 'product_types.php')) unset($Set['heading_inline_edit']['entry_type_id'], $Set['heading_quick_edit']['entry_type_id']);
		if ($save && $this->request->server['REQUEST_METHOD'] == 'POST' && !empty($this->request->post)) {
			$returner = '/*
	OpenCart Shopping Cart

	Quick Edit created by AvanOsch for http://www.CrystalCopy.nl

	***********************************************************
	****      THIS FILE IS AUTOMATICALLY GENERATED!!!      ****
	****     USE ADMIN AREA TO CHANGE YOUR SETTINGS!!!     ****
	***********************************************************
	Released under the GNU General Public License
*/'."\n\n";

			foreach ($Set as $HeadingName => $Options) {
				$returner .= (!empty($HeadingName)) ? '  // '.$this->language->get($HeadingName)."\n" : '';
				foreach ($Options as $OptionName => $Opt) {
					$Value = (isset($this->request->post[$Opt['var']]) && is_numeric($this->request->post[$Opt['var']])) ? $this->request->post[$Opt['var']] : (isset($this->request->post[$Opt['var']]) ? "'".$this->request->post[$Opt['var']]."'" : "''");
					$returner .= "  define('".$Opt['var']."', ".$Value.");\r\n";
				}
			}
		} else {
			$returner = '';
			foreach ($Set as $HeadingName => $Options) {
				$returner .= '<div style="padding:3px;">
								<div class="well" style="padding:5px;"><b> &nbsp; '.$this->language->get($HeadingName).'</b></div>';
				foreach ($Options as $OptionName => $Opt) {
					$OptionName = $this->language->get($OptionName);
					if (!isset($Opt['help'])) {
						if (strpos($Opt['var'], 'QUICK_')) $Opt['help'] = $this->language->get('text_quickedit') . ' ' . str_replace(':','',$OptionName) . '?';
						if (strpos($Opt['var'], 'INLINE_')) $Opt['help'] = $this->language->get('text_edit') . ' ' . str_replace(':','',$OptionName) . ' ' . $this->language->get('text_inline') . '?';
					} else {
						$Opt['help'] = $this->language->get($Opt['help']);
					}
					$Value = (defined($Opt['var'])) ? constant($Opt['var']) : '';
					$returner .= '<div class="qe-setting"><nobr><span style="margin-left:7px;">'.$OptionName.' </span>';
					if ($Opt['var'] == 'QE_QUICK_TIME' || $Opt['var'] == 'QE_DIALOG_WIDTH' || $Opt['var'] == 'QE_DIALOG_HEIGHT' || $Opt['var'] == 'QE_CATEGORY_HEIGHT') {
						$returner .= ' <input id="'.$Opt['var'].'" name="'.$Opt['var'].'" type="text" value="'. $Value .'" size="4" />';
					} elseif ($Opt['var'] == 'QE_DEFAULT_SORT') {
						$returner .= ' <select id="'.$Opt['var'].'" name="'.$Opt['var'].'">' .
							'<option value="pd.name"' . ($Value == 'pd.name' ? ' selected="selected"' : '') . '>' . $this->language->get('text_name') . '</option>' .
							'<option value="p.date_added"' . ($Value == 'p.date_added' ? ' selected="selected"' : '') . '>' . $this->language->get('text_date_added') . '</option>' .
							'<option value="p.date_modified"' . ($Value == 'p.date_modified' ? ' selected="selected"' : '') . '>' . $this->language->get('text_date_modified') . '</option>' .
							'<option value="p.model"' . ($Value == 'p.model' ? ' selected="selected"' : '') . '>' . $this->language->get('text_model') . '</option>' .
							'<option value="p.quantity"' . ($Value == 'p.quantity' ? ' selected="selected"' : '') . '>' . $this->language->get('text_quantity') . '</option>' .
							'<option value="p.price"' . ($Value == 'p.price' ? ' selected="selected"' : '') . '>' . $this->language->get('text_price') . '</option></select>';
					} else {
						$returner .= ' <input id="'.$Opt['var'].'" name="'.$Opt['var'].'" type="checkbox" value="1"'.($Value ? ' checked="checked"' : '').' />';
					}
					$returner .= '&nbsp; <i data-toggle="tooltip" title="' . $Opt['help'] . '" class="fa fa-question-circle" style="color:#1E91CF"></i></nobr></div>';
				}
				$returner .= '</div>';
			}
		}
		return $returner;
	}

	public function getProductValue($pId, $value) {
		$query = $this->db->query("SELECT DISTINCT " . $value . " FROM " . DB_PREFIX . "product WHERE product_id = '" . (int)$pId . "'");
		return $query->row[$value];
	}
}
?>