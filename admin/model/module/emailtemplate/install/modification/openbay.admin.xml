<file path="system/library/openbay.php" email_template="openbay.admin">
	<operation>
		<search index="0"><![CDATA[$subject = sprintf($language->get('text_new_subject')]]></search>
		<add position="after"><![CDATA[
		$file = DIR_SYSTEM . 'library/emailtemplate/email_template.php';

		if (file_exists($file)) {
			include_once($file);
		} else {
			trigger_error('Error: Could not load library ' . $file . '!');
			exit();
		}

          	$template = new EmailTemplate($this->request, $this->registry);

          	if (!empty($order_info['customer_group_id'])) {
           	$this->load->model('account/customer_group');
			$template->data['customer_group'] = $this->model_account_customer_group->getCustomerGroup($order_info['customer_group_id']);
           }

		if (!empty($order_info['affiliate_id'])) {
           	$this->load->model('affiliate/affiliate');
			$template->data['affiliate'] = $this->model_affiliate_affiliate->getAffiliate($order_info['affiliate_id']);
           }

		$template->addData($order_info);

		$template->addData('order_status_id', $order_status_id);

		$template->data['date_added'] = date($language->get('date_format_short'), strtotime($order_info['date_added']));

		if ($order_info['order_status_id'] != $order_status_id){
			$template->data['prev_order_status_id'] = $order_info['order_status_id'];
		}

		if ($order_info['comment']) {
           	$template->data['comment'] = str_replace(array("\r\n", "\r", "\n"), "<br />", $order_info['comment']);
        }

		$template->data['order_status'] = $order_status;

		if ($order_info['customer_id']) {
			$template->data['order_url'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_id;
			$template->data['order_url_tracking'] = $template->getTracking($template->data['order_url']);
		}

		$this->load->model('tool/image');
 			$this->load->model('tool/upload');
		$this->load->model('catalog/product');

		$order_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");

		$order_voucher_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_voucher WHERE order_id = '" . (int)$order_id . "'");

		$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_id . "' ORDER BY sort_order ASC");

]]></add>
	</operation>
	<operation>
		<search index="0"><![CDATA[$text .= $order_info['comment'] . "\n\n";]]></search>
		<add position="after" offset="1"><![CDATA[

		$template->data['text_order_detail'] = $language->get('text_new_order_detail');
		$template->data['text_order_id'] = $language->get('text_new_order_id');
		$template->data['text_date_added'] = $language->get('text_new_date_added');
		$template->data['text_payment_method'] = $language->get('text_new_payment_method');
		$template->data['text_shipping_method'] = $language->get('text_snew_hipping_method');
		$template->data['text_email'] = $language->get('text_new_email');
		$template->data['text_telephone'] = $language->get('text_new_telephone');
		$template->data['text_ip'] = $language->get('text_new_ip');
		$template->data['text_products'] = $language->get('text_new_products');
		$template->data['text_product'] = $language->get('text_new_product');
		$template->data['text_model'] = $language->get('text_new_model');
		$template->data['text_quantity'] = $language->get('text_new_quantity');
		$template->data['text_price'] = $language->get('text_new_price');
		$template->data['text_total'] = $language->get('text_new_total');

		$template->data['products'] = array();

		foreach ($order_product_query->rows as $product) {
			$product_data = $this->model_catalog_product->getProduct($product['product_id']);
			
			$option_data = array();

			$order_option_query = $this->db->query("SELECT oo.*, pov.* FROM " . DB_PREFIX . "order_option oo LEFT JOIN " . DB_PREFIX . "product_option_value pov ON (pov.product_option_value_id = oo.product_option_value_id) WHERE oo.order_id = '" . (int)$order_id . "' AND oo.order_product_id = '" . (int)$product['order_product_id'] . "'");

			foreach ($order_option_query->rows as $option) {
				if ($option['type'] != 'file') {
					$value = $option['value'];
				} else {
					$upload_info = $this->model_tool_upload->getUploadByCode($option['value']);

					if ($upload_info) {
						$value = $upload_info['name'];
					} else {
						$value = '';
					}
				}

				$option_data[] = array(
					'name'  => $option['name'],
					'price' => ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option['price']) ? $this->currency->format($this->tax->calculate($option['price'], $product_data['tax_class_id'], $this->config->get('config_tax') ? 'P' : false)) : 0,
					'price_prefix' => isset($option['price_prefix']) ? $option['price_prefix'] : '',
					'stock_quantity' => isset($option['quantity']) ? $option['quantity'] : '',
					'stock_subtract' => isset($option['subtract']) ? $option['subtract'] : '',
					'value' => (utf8_strlen($value) > 120 ? utf8_substr($value, 0, 120) . '..' : $value)
				);
			}

			if (isset($product_data['image'])) {
				$this->model_tool_image->setUrl($order_info['store_url']);

				$image = $this->model_tool_image->resize($product_data['image'], 50, 50);
			} else {
				$image = '';
			}

			$url = $this->url->link('product/product', 'product_id='.$product['product_id'], 'SSL');

			if ($this->config->get('config_stock_checkout') && $product_data['subtract']) {
				$stock_quantity = $product_data['quantity'] + $product['quantity']; // quantity before order
			} else {
				$stock_quantity = false;
			}

			if ($stock_quantity && $product['quantity'] > $stock_quantity) {
				$stock_backorder = $product['quantity'] - $stock_quantity;
			} else {
				$stock_backorder = false;
			}
			
			$template->data['products'][] = array(
				'product_id'       => $product_data['product_id'],
				'url'     		   => $url,
				'url_tracking' 	   => $template->getTracking($url),
				'image'     	   => $image,
				'weight'		   => ($product_data['weight'] > 0) ? $this->weight->format($product_data['weight'], $product_data['weight_class_id']) : 0,
				'description'      => utf8_substr(strip_tags(html_entity_decode($product_data['description'], ENT_QUOTES, 'UTF-8')), 0, 200) . '..',
				'manufacturer'     => $product_data['manufacturer'],
				'sku'              => $product_data['sku'],
				'stock_status'     => $product_data['stock_status'],
				'stock_subtract'   => $product_data['subtract'],
				'stock_quantity'   => $stock_quantity,
				'stock_backorder'  => $stock_backorder,
				'name'     => $product['name'],
				'model'    => $product['model'],
				'option'   => $option_data,
				'quantity' => $product['quantity'],
				'price'    => $this->currency->format($product['price'] + ($this->config->get('config_tax') ? $product['tax'] : 0), $order_info['currency_code'], $order_info['currency_value']),
				'total'    => $this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value'])
			);
		}

		$template->data['vouchers'] = array();

		foreach ($order_voucher_query->rows as $voucher) {
			$template->data['vouchers'][] = array(
				'description' => $voucher['description'],
				'amount'      => $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']),
			);
		}

		foreach ($order_total_query->rows as $total) {
			$template->data['totals'][] = array(
				'title' => $total['title'],
				'text'  => $this->currency->format($total['value'], $order_info['currency_code'], $order_info['currency_value']),
			);
		}

		$template->data['order_link'] = (defined('HTTP_ADMIN') ? HTTP_ADMIN : HTTPS_SERVER.'admin/') . 'index.php?route=sale/order/info&order_id=' . $order_id;

		// Total cart weight
		if (!empty($order_info['weight'])) {
			$template->data['order_weight'] = $this->weight->format($order_info['weight'], $this->config->get('config_weight_class_id'), $this->language->get('decimal_point'), $this->language->get('thousand_point'));
		}]]></add>
	</operation>
	<operation>
		<search index="0"><![CDATA[$mail->send();]]></search>
		<add position="replace"><![CDATA[
				$template->load('openbay.admin');

				$template->build();

				$mail = $template->hook($mail);

				if ($template->data['emailtemplate']['attach_invoice']) {
		    		$this->load->model('module/pdf_invoice');

		    		$pdf_invoice = $this->model_module_pdf_invoice->getInvoice($order_info, true);

		    		if ($pdf_invoice && file_exists($pdf_invoice)) {
		    			$template->data['emailtemplate_invoice_pdf'] = $pdf_invoice;

		    			$mail->addAttachment($pdf_invoice);
		    		}
		    	}

				$mail->send();

				$template->sent();]]></add>
	</operation>
</file>